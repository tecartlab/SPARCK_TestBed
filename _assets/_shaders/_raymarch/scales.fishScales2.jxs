<jittershader name="ray.template.jxs">
	<description>SPARCK - ShaderTemplate - (c) 2017 by maybites</description>

	<param name="sprk_worldMatrix" type="mat4" state="WORLD_MATRIX" />
	<param name="sprk_rotMatrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="sprk_viewPos" type="vec3" default="0. 0. 0." description="test"/>
	<param name="sprk_worldRefPos" type="vec3" default="0. 0. 0." description="test"/>
	<param name="sprk_globalTime" type="float" default="0." />
	<param name="sprk_scale" type="float" default="1." />

	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />

    <!-- COMMENT: add here your own parameters...

    copy and modify the following lines outsite of this comment section:

	<param name="myVeryOwnFloat" type="float" default="1." description="Use_underscore_for_spaces_to_seperate_'words'"/>
	<param name="myVeryOwnVec3" type="vec3" default="0. 0. 0." description="text with spaces will only show up as 'text'"/>

    you can use parameters of the following types:

        TYPES       GUI     QUE

        -float      y       y
        -vec2       y       y
        -vec3       y       y
        -vec4       y       y
        -mat3       -       y
        -mat4       -       y

        DON'T USE int: it is reserved for textures!!

    GUI: The RayMarching Node will scan the parameters and tries to make them accessible through the userinterface
    QUE: These parameters can be sent to this shader via OSC or QueScript.

    ...Dont forget to bind it the shader: END OF COMMENT-->

	<language name="glsl" version="1.2">
		<bind param="sprk_worldMatrix" program="vp" />
		<bind param="sprk_rotMatrix" program="fp" />
		<bind param="sprk_scale" program="fp" />
		<bind param="sprk_viewPos" program="fp" />
		<bind param="sprk_worldRefPos" program="fp" />
		<bind param="sprk_globalTime" program="fp" />

		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />

        <!-- COMMENT: bind your own parameters here to the vertex shader (vp) and/or fragment shader (fp)

        copy and modify the following lines outsite of this comment section:

        <bind param="myVeryOwnFloat" program="fp" />
        <bind param="myVeryOwnVec3" program="fp" />

        ...until here.-->

		<program name="vp" type="vertex">
<![CDATA[

// >>>>> ================================
// >>>>> DO NOT CHANGE ANYTHING FROM HERE
// >>>>> ================================

#version 120

uniform mat4 sprk_worldMatrix;
uniform mat4 sprk_rotMatrix;

varying vec3 sprk_normal;	// surface normal
varying vec3 sprk_localPos;	// vertex local position
varying vec3 sprk_worldPos;	// vertex world position

varying vec2 sprk_texcoord0;
varying vec2 sprk_texcoord1;
varying vec2 sprk_texdim0;
varying vec2 sprk_texdim1;

void main(void)
{
	// perform standard transform on vertex (general approach)
	gl_Position = ftransform();

	gl_TexCoord[0]  = gl_TextureMatrix[0] * gl_MultiTexCoord0;

	sprk_normal = normalize(mat3(sprk_worldMatrix) * gl_Normal);
	sprk_localPos = vec3(sprk_rotMatrix * gl_Vertex);
	sprk_worldPos = vec3(sprk_worldMatrix * gl_Vertex);

	// transform texcoords
    sprk_texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    sprk_texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    // extract the x and y scalars from the texture matrix to determine dimensions
    sprk_texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    sprk_texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}

]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

uniform vec3 sprk_viewPos; 			// point of view position
uniform vec3 sprk_worldRefPos;      // reference position of this virtual world
uniform mat4 sprk_rotMatrix; 		// rotation matrix
uniform float sprk_scale;			// viewline scale
uniform float sprk_globalTime; 		// time

varying vec3 sprk_normal;			// surface normal
varying vec3 sprk_worldPos;			// vertex world position
varying vec3 sprk_localPos;			// vertex local position

// samplers
uniform sampler2DRect tex0;			// texture reference for texture 0
uniform sampler2DRect tex1;			// texture reference for texture 1

// texcoords
varying vec2 sprk_texcoord0;		// texture coordinate for texture 0
varying vec2 sprk_texdim0;			// texture dimension for texture 0
varying vec2 sprk_texcoord1;		// texture coordinate for texture 1
varying vec2 sprk_texdim1;			// texture dimension for texture 0

// ================================= <<<<<<
// ...................... UNTIL HERE <<<<<<
// ================================= <<<<<<

// From here onwards will be your custom code...

// *************************************************************************
//
// Created by:  sp0rk3d
//	https://www.shadertoy.com/view/Wl33R4
//
// *************************************************************************

// Add here your own parameters

uniform float myVeryOwnFloat;
uniform vec3 myVeryOwnVec3;

// If your old shader code came from shadertoy.com and used mouse interaction,
// these values will usually lead to good results
// since we dont need them anymore they can be static.

vec2 iMouse = vec2(0.5, 0.5);
vec2 iResolution = vec2(1, 1);
float iGlobalTime = sprk_globalTime;

// >>>>>>>>>>>>>>>>>>>>>>

// Dave Hoskins - https://www.shadertoy.com/view/4djSRW

float N21(vec2 p)
{
		vec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}

// <<<<<<<<<<<<<<<<<<<<<<


// the main function needs to look like this:

void main() {
    // It should start with the following code block

    // =================  DO NOT CHANGE THIS CODE  =============================
	vec4 sprk_vl_raw = vec4(sprk_worldPos - sprk_viewPos - sprk_worldRefPos, 1);
	vec3 sprk_vl_dir = (sprk_rotMatrix * sprk_vl_raw).xyz;
	vec3 sprk_ray    = normalize(sprk_vl_dir) * sprk_scale;
    // =================  DO NOT CHANGE THIS CODE  =============================

    // usefull variables that are controlled by the RayMarching Node are:

    //  sprk_ray        (vec3) -> it is THE RAY
    //  sprk_viewPos;   (vec3) -> the world postion of your eye
    //  sprk_localPos   (vec3) -> the place where the ray hits the canvas. (local coordinate system)
    //  sprk_worldPos   (vec3) -> the place where the ray hits the canvas. (global coordinate system)
    //  sprk_rotMatrix  (mat4) -> rotates the ray around itself
    //  sprk_scale      (float)-> scales the ray
    //  sprk_globalTime (float)-> the global time in seconds

	// example code for gathering texture color:

    //vec3 sprk_texColor0   = texture2DRect(tex0, sprk_texcoord0).rgb;
    //vec3 sprk_texColor1   = texture2DRect(tex1, sprk_texcoord1).rgb;

    // >>>>>>>>>>>>>>>>>>>>>>

		vec2 fragCoord = sprk_texcoord0.xy;
		float iTime = sprk_globalTime;

		float scale = sin(iTime * 0.01) * 5. + 10.;

     // Normalized pixel coordinates (from 0 to scale)
     float mRez = max(iResolution.x, iResolution.y);
     vec2 uv = fragCoord/mRez;
 			uv *= scale;

     //float radius = cos(iTime + uv.x) * 0.25 + 0.75; //animated
     float radius = 0.75; //static
     uv += vec2(	sin(uv.y - iTime * 0.33) * ((1. - (uv.x/scale)) * 0.1 + 0.01),
               	sin(uv.x + iTime * 0.66) * (uv.x/scale * 0.3 + 0.01)
               );

     vec2 uvr = vec2(int(uv.x + 0.5), int(uv.y + 0.5));

     // offset vectors from center of uvr in order of priority
     vec2 p0 = vec2(1., -1.);
     vec2 p1 = vec2(0., -1.);
     vec2 p2 = vec2(0.5, -.5);
     vec2 p3 = vec2(1., 0.);
     vec2 p4 = vec2(-0.5, -0.5);
     vec2 p5 = vec2(0.5, 0.5);
     vec2 p6 = vec2(-0.5, 0.5);

 	// sclae ID
     vec2 ID = vec2(0.);
     // distance
     float Dist = 0.;

     if(distance(uv, uvr + p0) < radius){
         Dist = distance(uv, uvr + p0);
     	ID = uvr + p0;
     }else if(distance(uv, uvr + p1) < radius){
         Dist = distance(uv, uvr + p1);
     	ID = uvr + p1;
     }else if(distance(uv, uvr + p2) < radius){
         Dist = distance(uv, uvr + p2);
     	ID = uvr + p2;
     }else if(distance(uv, uvr + p3) < radius){
         Dist = distance(uv, uvr + p3);
     	ID = uvr + p3;
     }else if(distance(uv, uvr + p4) < radius){
         Dist = distance(uv, uvr + p4);
     	ID = uvr + p4;
     }else if(distance(uv, uvr) < radius){
         Dist = distance(uv, uvr);
     	ID = uvr;
     }else if(distance(uv, uvr + p5) < radius){
         Dist = distance(uv, uvr + p5);
     	ID = uvr + p5;
     }else if(distance(uv, uvr + p6) < radius){
         Dist = distance(uv, uvr + p6);
     	ID = uvr + p6;
     }


     // distance from center to edge of scale
     Dist /= radius;

     // per scale uv
     vec2 suv = vec2(uv - ID)/radius;

     // randomized ID by hash noise
     float rID = N21(ID);

     // color
     vec3 colA = vec3(36.,126.,246.)/255.;
     vec3 colB = vec3(26.,88.,234.)/255.;
     vec3 colC = vec3(0.95);
     vec3 wave = mix(colA, colB, N21(ID));

     float m = cos(Dist * 6.28 * 4.25)* 0.5 + 0.5;
     m = smoothstep(0., 14.*scale/mRez, m-.8);

     vec3 col = mix(colC, wave, m);

		     // <<<<<<<<<<<<<<<<<<<<<<

    // setting the fragments color:
	gl_FragColor = vec4(col * (suv.y * 0.5 + 0.5),1.0);
}


]]>
		</program>
	</language>
</jittershader>
