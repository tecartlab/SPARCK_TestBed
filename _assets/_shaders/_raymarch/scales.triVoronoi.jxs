<jittershader name="ray.template.jxs">
	<description>SPARCK - ShaderTemplate - (c) 2017 by maybites</description>

	<param name="sprk_worldMatrix" type="mat4" state="WORLD_MATRIX" />
	<param name="sprk_rotMatrix" type="mat4" default="0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0." />
	<param name="sprk_viewPos" type="vec3" default="0. 0. 0." description="test"/>
	<param name="sprk_worldRefPos" type="vec3" default="0. 0. 0." description="test"/>
	<param name="sprk_globalTime" type="float" default="0." />
	<param name="sprk_scale" type="float" default="1." />

	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />

    <!-- COMMENT: add here your own parameters...

    copy and modify the following lines outsite of this comment section:

	<param name="myVeryOwnFloat" type="float" default="1." description="Use_underscore_for_spaces_to_seperate_'words'"/>
	<param name="myVeryOwnVec3" type="vec3" default="0. 0. 0." description="text with spaces will only show up as 'text'"/>

    you can use parameters of the following types:

        TYPES       GUI     QUE

        -float      y       y
        -vec2       y       y
        -vec3       y       y
        -vec4       y       y
        -mat3       -       y
        -mat4       -       y

        DON'T USE int: it is reserved for textures!!

    GUI: The RayMarching Node will scan the parameters and tries to make them accessible through the userinterface
    QUE: These parameters can be sent to this shader via OSC or QueScript.

    ...Dont forget to bind it the shader: END OF COMMENT-->

	<language name="glsl" version="1.2">
		<bind param="sprk_worldMatrix" program="vp" />
		<bind param="sprk_rotMatrix" program="fp" />
		<bind param="sprk_scale" program="fp" />
		<bind param="sprk_viewPos" program="fp" />
		<bind param="sprk_worldRefPos" program="fp" />
		<bind param="sprk_globalTime" program="fp" />

		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />

        <!-- COMMENT: bind your own parameters here to the vertex shader (vp) and/or fragment shader (fp)

        copy and modify the following lines outsite of this comment section:

        <bind param="myVeryOwnFloat" program="fp" />
        <bind param="myVeryOwnVec3" program="fp" />

        ...until here.-->

		<program name="vp" type="vertex">
<![CDATA[

// >>>>> ================================
// >>>>> DO NOT CHANGE ANYTHING FROM HERE
// >>>>> ================================

#version 120

uniform mat4 sprk_worldMatrix;
uniform mat4 sprk_rotMatrix;

varying vec3 sprk_normal;	// surface normal
varying vec3 sprk_localPos;	// vertex local position
varying vec3 sprk_worldPos;	// vertex world position

varying vec2 sprk_texcoord0;
varying vec2 sprk_texcoord1;
varying vec2 sprk_texdim0;
varying vec2 sprk_texdim1;

void main(void)
{
	// perform standard transform on vertex (general approach)
	gl_Position = ftransform();

	gl_TexCoord[0]  = gl_TextureMatrix[0] * gl_MultiTexCoord0;

	sprk_normal = normalize(mat3(sprk_worldMatrix) * gl_Normal);
	sprk_localPos = vec3(sprk_rotMatrix * gl_Vertex);
	sprk_worldPos = vec3(sprk_worldMatrix * gl_Vertex);

	// transform texcoords
    sprk_texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    sprk_texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
    // extract the x and y scalars from the texture matrix to determine dimensions
    sprk_texdim0 = vec2 (abs(gl_TextureMatrix[0][0][0]),abs(gl_TextureMatrix[0][1][1]));
    sprk_texdim1 = vec2 (abs(gl_TextureMatrix[1][0][0]),abs(gl_TextureMatrix[1][1][1]));
}

]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

uniform vec3 sprk_viewPos; 			// point of view position
uniform vec3 sprk_worldRefPos;      // reference position of this virtual world
uniform mat4 sprk_rotMatrix; 		// rotation matrix
uniform float sprk_scale;			// viewline scale
uniform float sprk_globalTime; 		// time

varying vec3 sprk_normal;			// surface normal
varying vec3 sprk_worldPos;			// vertex world position
varying vec3 sprk_localPos;			// vertex local position

// samplers
uniform sampler2DRect tex0;			// texture reference for texture 0
uniform sampler2DRect tex1;			// texture reference for texture 1

// texcoords
varying vec2 sprk_texcoord0;		// texture coordinate for texture 0
varying vec2 sprk_texdim0;			// texture dimension for texture 0
varying vec2 sprk_texcoord1;		// texture coordinate for texture 1
varying vec2 sprk_texdim1;			// texture dimension for texture 0

// ================================= <<<<<<
// ...................... UNTIL HERE <<<<<<
// ================================= <<<<<<

// From here onwards will be your custom code...

// *************************************************************************
//
// Created by: aiekick
//	https://www.shadertoy.com/view/3sGSzc
//
// *************************************************************************

// Add here your own parameters

uniform float myVeryOwnFloat;
uniform vec3 myVeryOwnVec3;

// If your old shader code came from shadertoy.com and used mouse interaction,
// these values will usually lead to good results
// since we dont need them anymore they can be static.

vec2 iMouse = vec2(0.5, 0.5);
vec2 iResolution = vec2(1000, 1000);
float iGlobalTime = sprk_globalTime;

// >>>>>>>>>>>>>>>>>>>>>>

// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
// Tuned via NoodlesPlate (https://github.com/aiekick/NoodlesPlate/releases)

const vec3 color0 = vec3(0.2,0.1,0.3);
const vec3 color1 = vec3(0.6,0.1,1.9);
const vec3 lightColor = vec3(0.7,1.6,0.6);

vec3 shape(vec2 g, float iTime)
{
	float c = 9.0;

    float t = iTime;
	float t1 = t * 0.1;

	vec2 p = vec2(0), sp = p;

    g *= 2.0;

    for(int x=-2;x<=2;x++)
    for(int y=-2;y<=2;y++)
    {
        p = vec2(x,y);
        p += .5 + .5*sin( t1 * 10. + 9. * fract(sin((floor(g)+p)*mat2(2,5,5,2)))) - fract(g);
        p *= mat2(cos(t1), -sin(t1), sin(t1), cos(t1));
        float d = max(abs(p.x)*.866 - p.y*.5, p.y);
        if (d < c)
        {
            c = d;
            sp = p;
        }
    }

    return vec3(c,sp);
}

// <<<<<<<<<<<<<<<<<<<<<<


// the main function needs to look like this:

void main() {
    // It should start with the following code block

    // =================  DO NOT CHANGE THIS CODE  =============================
	vec4 sprk_vl_raw = vec4(sprk_worldPos - sprk_viewPos - sprk_worldRefPos, 1);
	vec3 sprk_vl_dir = (sprk_rotMatrix * sprk_vl_raw).xyz;
	vec3 sprk_ray    = normalize(sprk_vl_dir) * sprk_scale;
    // =================  DO NOT CHANGE THIS CODE  =============================

    // usefull variables that are controlled by the RayMarching Node are:

    //  sprk_ray        (vec3) -> it is THE RAY
    //  sprk_viewPos;   (vec3) -> the world postion of your eye
    //  sprk_localPos   (vec3) -> the place where the ray hits the canvas. (local coordinate system)
    //  sprk_worldPos   (vec3) -> the place where the ray hits the canvas. (global coordinate system)
    //  sprk_rotMatrix  (mat4) -> rotates the ray around itself
    //  sprk_scale      (float)-> scales the ray
    //  sprk_globalTime (float)-> the global time in seconds

	// example code for gathering texture color:

    //vec3 sprk_texColor0   = texture2DRect(tex0, sprk_texcoord0).rgb;
    //vec3 sprk_texColor1   = texture2DRect(tex1, sprk_texcoord1).rgb;

    // >>>>>>>>>>>>>>>>>>>>>>

		vec2 fragCoord = sprk_texcoord0.xy * 6.0;
		float iTime = sprk_globalTime;

		vec2 uv = vec2((fragCoord.x - 0.5) / 0.5, fragCoord.y - .5);

		float t = iTime * 0.5;

		float k = 0.01;
		vec3 f = shape(uv, iTime);
		float fx = shape(uv + vec2(k,0.0), iTime).x-f.x;
		float fy = shape(uv + vec2(0.0, k), iTime).x-f.x;

		vec3 n = normalize(vec3(fx, 0.1, fy) );

		vec3 col = mix( color0, color1, f.x );

		float r = sin(t + f.y)*cos(t + f.z) * .5 + .5;
		col = mix(col.xyz, mix(col.zxy, col.yzx, r), 1.-r);

		col += .4 * pow(max(dot( n, vec3(0,1,0)), 0.), 100.) * lightColor;

    // <<<<<<<<<<<<<<<<<<<<<<

    // setting the fragments color:
	gl_FragColor = vec4( col, 1.0 );
}


]]>
		</program>
	</language>
</jittershader>
